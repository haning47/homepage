<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=big5">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>新網頁1</title>
</head>

<body background="images/back1.gif">

<p align="center"><img border="0" src="images/title6.gif" width="515" height="79"><a name="top"></a></p>

<table border="1" width="100%">
  <tr>
    <td width="100%">
      <p align="center">程式語言的簡介</td>
  </tr>
  <tr>
    <td width="100%">程式語言的意義<br>
      &#8226; 由一組系統化的符號所成之集合，目的是<br> 
   表達某種機器解決特定問題的步驟<br>
      &#8226; 向計算機描述計算過程之工具<br> 
      &#8226; 程式語言設計的目標是簡潔(simplicity) ，如<br> 
   何以最&#64029;簡的方式&#63789;表達<br>
      <br>
      程式語言的分&#63952;<br>
      &#8226; 第一代程式語言—機器語言(低階語言)<br> 
      <br>
     機器語言(machine language)<br> 
       – 指&#63912;與資&#63934;均由二進碼所組成<br> 
       – 寫成的程式段&#63847;需語言處&#63972;器處&#63972;，&#63845;可直接在機器上執&#64008;<br> 
      <br>
      &#8226; 第二代程式語言—組合語言(低階語言)<br> 
      <br>
     組合語言(assembly language)<br> 
       – 組合語言的指&#63912;稱為助憶碼<br> 
       – 組合語言的指&#63912;分為機器指&#63912;(machine operation)與虛擬指&#63912;(pseudo operation)二&#63952;<br> 
       – 必需經由組譯程式(assembler )的處&#63972;，才可在機器上執&#64008;<br> 
       – 與機器語言合稱為低階語言<br> 
      <br>
      &#8226; 第三代程式語言—高階語言<br> 
      <br>
     高階語言(high level language)<br> 
       – 又稱為程序導向語言(procedure oriented language)<br> 
       – 此種語言必需經過編譯或直譯程式處&#63972;過方可執&#64008;<br> 
       – 如Pascal，C，Basic，Fortran與Cobol。<br> 
      <br>
      &#8226; 第四代程式語言—極高階語言<br> 
      <br>
     極高階語言<br>
       – 又稱為問題導向語言(problem-oriented language)<br> 
       – 如SQL(Structured Query Language)<br> 
      <br>
      &#8226; 第五代程式語言—自然語言<br> 
      <br>
     自然語言(nature language)<br> 
       – 又稱為知&#63996;庫語言(knowledge based language)<br> 
       – 語法接近人&#63952;日常生活的語言<br> 
       – &#63925;如演算法的虛擬碼<br> 
      <br>
      <a href="#top">top</a></td>
  </tr>
  <tr>
    <td width="100%">
      <p align="center">程式語言的演進</td>
  </tr>
  <tr>
    <td width="100%">Fortran<br>
      &#8226; 第一個高階語言<br> 
      &#8226; 針對科學計算而設計<br> 
      &#8226; 具固定格式(程式必需由第7個位置寫起)<br> 
      &#8226; Compiler 於1957/4完成，由18 人&#63886;完成<br> 
      &#8226; 變&#63849;名單&#63847;能超過6個字<br> 
      &#8226; 首創輸出入格式化(I/O format，I 為整&#63849;，F 為浮<br> 
   點&#63849;)<br>
      &#8226; 允許隱含性變&#63849;(ijklmn開頭的變&#63849;名稱為整&#63849;)<br>
      &#8226; 提供正、&#63922;、負三種IF 分枝結構<br> 
      &#8226; 提供Do Loop迴圈控制結構(後測迴圈)<br> 
      &#8226; 後期才加入字&#63749;處&#63972;(Fortran 90)<br> 
      <br>
      <br>
      Algol 60<br> 
      &#8226; ALGOrithmic Language<br> 
      &#8226; 發展於1960&#63886;代, 但無較大之贊助者<br> 
      &#8226; 採自由格式(free format)<br> 
      &#8226; 採外顯式(explicit)宣告<br> 
      &#8226; 採區塊結構(block structure)<br> 
      &#8226; 允許使用遞迴副程式(recursive subroutine)<br> 
      &#8226; 使用傳名呼叫法(call by name)傳遞&#63851;&#63849;<br> 
      <br>
      &#8226; 首創以保&#63949;字(reserved word)&#63789;定義資&#63934;型態<br> 
      &#8226; 程式指&#63912;以分號結束<br> 
      &#8226; 設定值符號為:=<br> 
      &#8226; 動態界限陣&#63900;<br> 
      &#8226; 首創結構化程式設計的概&#63907;<br> 
      &#8226; 首創以B.N.F.&#63789;描述語法(Algol 58提出)<br> 
      &#8226; 結構化程式設計的概&#63907;為程式設計過程依程<br> 
   式的&#63763;輯性&#63847;斷細分，直到很容&#63968;編寫程式<br>
   單元為止，且應儘&#63870;避免用goto<br>
      <br>
      C 語言<br> 
      &#8226; 貝爾實驗室於1970&#63886;代發展出&#63789;。<br> 
      &#8226; 採區塊結構(block structure)。<br> 
      &#8226; 可攜性高，高&#64001;的移轉性&#56256;&#56526;機器獨&#63991;性。<br> 
      &#8226; 適合發展系統程式。<br> 
      &#8226; 具Self-compiled 特性(C語言本身的編譯程<br> 
      式大部份是用C語言寫成)。<br>
      &#8226; 可呼叫組合語言。<br> 
      &#8226; Unix系統絕大部份是用C語言寫成<br> 
      <br>
      C++<br>
      &#8226; C++ 語言為Bjarne Stroustrup 設計，在貝爾<br> 
   實驗室中發展。<br>
      &#8226; C++ 語言設計的主要目標是希望能實現物件<br> 
   導向程式設計的&#63972;想，因此C++是以C語言為<br>
   根本並結合&#63930;Simula 67的物件導向概&#63907;，及<br> 
   Algol 68的overloading特性而形成最初的C++<br> 
   語言。<br>
      &#8226; C++ 語言採用區塊結構（Block Structure）。<br> 
      &#8226; C++ 語言非常適合發展系統程式，且&#63965;用<br> 
   C++ 語言製作之程式具有很高的可攜性即機<br> 
   器獨&#63991;性。<br>
      &#8226; C++ 語言會區分大小寫，如main、Main、<br> 
   MAIN在C++語言中是被視為&#63847;同的符號。<br>
      &#8226; 輸入敘述為&quot;cin”<br>
   語法： cin >> "變&#63849;"<br> 
   由鍵盤將值&#63834;入變&#63849;中。<br>
      &#8226; 輸出敘述為&quot;cout“<br>
   語法： cout &lt;&lt; "資&#63934;"<br> 
   將“資&#63934;”輸出到螢幕上。<br>
      &#8226; C++語言的&#63996;別字由大小寫英文字母，&#63849;字<br> 
   或底線所構成，但第一個字元&#63847;得為&#63849;字。<br>
      <br>
      JAVA<br>
      &#8226; 由Sun Microsystems所發展，其名稱之命名<br> 
   是源於突發的&#63923;感。<br>
      &#8226; 物件導向程式語言，以class 為基本架構。<br> 
      &#8226; 提供垃圾收集法(garbage collection)&#63789;管&#63972;<br> 
   使用者&#63847;再使用的記憶體空間。<br>
      &#8226; 提供執&#64008;緒(Multithread)功能。<br> 
      &#8226; 提供&#63925;外處&#63972;(exception) 能&#63882;。<br> 
      &#8226; JAVA取消&#63930;指標(pointer)資&#63934;型態，多重<br> 
   繼承(multiple inheritance)，及運算子覆載<br> 
   (operator overloading)等性質。<br> 
      &#8226; &#63965;用JAVA語言寫成的程式經由編譯器(compiler)處<br> 
   &#63972;後產生的碼稱為Byte Code (中間碼)，這種碼可在<br> 
   &#63847;同的機器平台上移植，待要執&#64008;時，再由JAVA的<br>
   直譯器(interpreter)處&#63972;此Byte Code即可，因此<br> 
   JAVA語言比C語言具有&#63745;高的可攜性。<br>
      &#8226; JAVA語言允許其程式段能夠透過網&#63799;系統到另一個<br> 
   機器平台上執&#64008;。<br>
      &#8226; 目前在Windows、Macintosh、SUN、Linux等開發<br> 
   平台上已有的直譯程式可供使用。
      <p>　</p>
      <p><a href="#top">top</a></td>
  </tr>
  <tr>
    <td width="100%">
      <p align="center">高階語言的處&#63972;器</td>
  </tr>
  <tr>
    <td width="100%">&#8226; 高階語言的處&#63972;器主要的作用即是將&#63965;用高階語言<br> 
   寫成的程式段翻譯成機器可接受的碼。<br>
      &#8226; 主要可分成編譯器(compiler)及直譯器(interpreter)<br> 
   二&#63952;，&#63855;明如下：<br>
     – 1.編譯器：編譯器會對原始程式碼中的每一條敘<br> 
          述，按照先後順序做一次之處&#63972;，並產生對應的<br>
          目的碼。<br>
     – 2.直譯器：直譯器會對原始程式碼中的敘述，按<br> 
          照執&#64008;的先後順序做處&#63972;，並直接產生程式執&#64008;<br>
          結果。
      <p><a href="#top">top</a></td>
  </tr>
</table>

</body>

</html>
