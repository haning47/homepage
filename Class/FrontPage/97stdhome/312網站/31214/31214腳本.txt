dob.tnc.edu.tw      




1.程式語言

從 1957 年第一種程式語言 FORTRAN 發明以來，到 1993 年為止，
估計人類已經發明了約 1000 種不同的程式語言，只有約 300 種至今仍流傳使用，
另外 700 種程式語言則幾乎沒有人使用，其中較知名者只有幾十種，
例如 Ada 、 BASIC 、 C/C++ 、 Cobol、 Delphi 、 FORTRAN 、 Java 、 
Lisp 、 Pascal 、 Prolog 、 VB 、 Smalltalk …等，
但仍不斷有新的程式語言誕生。

早期在程式語言萬馬奔騰的時代，每一種程式語言通常有比較清楚的功能分際，
例如 BASIC 適合初學者、 C 語言適合用來開發系統程式、
FORTRAN為科學運算程式語言、 Pascal 為結構化程式語言…，
不過隨著技術的演進，這些分際越來越模糊，演變至今，
較先進的程式語言幾乎都有一個共同的特色，那就是「物件導向」，
也就是說，物件導向已經成為程式語言的主流。

為什麼物件導向會成為程式語言的主流呢？
因為程式語言本身不可能無限制地擴增功能。
若無限制地擴增功能會增加系統的負擔，也會增加使用者的困擾，
但另一方面，對程式設計師來說，卻希望程式的功能能無限擴張，
而物件導向程式語言的特色之一便是可以讓程式設計師以既有的物件為基礎，
擴增物件的功能，藉此擴張程式語言的功能。 

雖然物件導向程式語言比傳統程式語言難，
但不同程式語言之間的互通性高 ( 特別是觀念上的互通 )，
學過一種物件導向程式語言，想再學另一種物件導向程式語言，
通常都很容易上手，因此對初學者來說，
可以選擇任何一種物件導向程式語言作為學習的第一個程式語言，
目前市場上接納度較高的物件導向程式語言有 C++ 、 C# 、
 Java 、 VB7 …等。


程式語言的演進史 
依據程式語言的演進史，大致可分成四代程式語言： 



第一代程式語言： 

第一代程式語言，簡單來說就是機器語言與組合語言 (Assembly Language) 。 

「機器語言」為一連串的 0 與 1 ，在不同的排列組合下，可以命令 CPU 執行不同的動作。 

「組合語言」就是用助憶碼來代表複雜的機器指令，使人們可以用文字表示這些複雜的 0 與 1 之指令。組合語言比機器語言的抽象化程度稍高，至少人們較易讀的懂。 

※曾有一些日本的硬體廠商，為了製造第五代電腦，創造出以 CPU 能直接讀的懂 LISP 的 Symbolic 的機器，雖然後來並未成功，但開啟 CPU 提供高階語言能力的趨勢。 

第二代程式語言 
如 FORTRAN 、 COBOL 、 BASIC ，這些語言的知名度與接受度都相當高，在不久的將來相信也不會一下子消失，
許多人第一次學語言便是從這開始。同時，
這些語言的穩定性與大量已存在的程式碼是這些語言仍然能流傳的重要因素。所以，
許多有心人士便將這些語言予以「進化」，如 FORTRAN 由 77 變成 FORTRAN-90 增強了平行處理的能力； COBOL 變成 COBOL-97 ，
具有物件導向的功能； BASIC 演變成微軟公司極成功的產品── Visual Basic ，
同樣也是具有物件導向的功能等等。 

第三代程式語言 
如 C 、 PASCAL 等，這些語言標榜著結構化程式設計語言，擁有正規完善的程式語言結構，
為 70 、 80 年代開發各種軟體的主要程式語言。由於這些語言的結構嚴謹（因為遵循 BNF 的關係），
所以今日的許多語言大部份都是這語言的延伸版本，如 Delphi (Object PASCAL) 除了 OO (Object-Oriented ，
物件導向 ) 的功能外，遵循 PASCAL 的語法； C++ 更是強調 C 為其一個子集。 

※第三代物件導向的程式語言

如 C++ 、 Smalltalk 等，具有物件導向的功能。我們認為 Java 亦在其中。拜 OO 觀念之賜，
已經有越來越多的傳統語言或是新創造的程式語言引進 OO 觀念於程式語言結構中。 

第四代程式語言 
第四代語言基本上是傳統軟體工程界為了「範式開發」 (prototyping) 而設計出來的語言，
同時具有程序性與非程序性（就是宣告性）的特性，用來快速開發連接資料庫的程式語言。
如今天的 PowerBuilder 、 SQLWindows 等等。 



由以上的說明，我們可知目前主流的程式語言，或是即將改版的程式語言（如 COBOL-97, Ada-95, Modula-3 ），
清一色都是物件導向程式語言， Java 也是，擁有物件導向語言的特性。而這些 OO 功能特性，
均是從物件導向語言的老祖宗 Simula67 延伸出來的，並且新的語言幾乎都受到目前較流行的 Smalltalk 
與 C++ 的影響。然而為什麼會有這種程式語言的分類法呢？有人認為是軟體程式設計方法論的不同，
造成程式語言間的分水嶺。如第二代程式語言歸趨於結構化式語言設計，
所以無論 FORTRAN 、 COBOL 、 BASIC 、 C 、 PASCAL 等，用該類程式語言設計軟體時，
都必須依造「結構化分析與結構化設計」的原則設計軟體，才能得到好的產品。
而應用第三代特殊的物件導向程式語言設計軟體時，則必須依照「物件導向分析與設計」的觀念，
才能設計好的軟體產品。 



第四代程式語言則屬於範型設計，類似今日的 RAD （快速軟體開發），只求快速地製造出軟體大概的樣子，
並不考慮軟體產品的執行效能等問題，旨在求得終端使用者對軟體的反應與回應。但我們認為，
除了軟體程式設計方法論不同外，程式語言文化的不同，亦是造成程式語言間的分水嶺。
對於程式語言文化的不同，我們簡單比喻如下：就像人會因年齡的不同而有所謂的代溝，
程式語言文化的不同亦會造成程式設計師的代溝，與設計出來軟體產品使用者介面的代溝。
如馮紐曼認為：不會寫機器語言的程式設計師就不是一個好的程式設計師；朱邦復先生曾經出過一本
「組合語言的藝術」，描述如何用組合語言撰寫大型軟體專案；
 Inside Windows NT 一書的作者 Jeffrey Richte 認為 C 語言是最好的程式語言，
 Inside Windows NT 全書皆用 C 語言講述 NT 的內部構造；
許多人認為 Visual BASIC 是他們最得力助手的程式語言工具；
而我們這些人認為 OOPL 才是目前世界上最 Powerful 的語言。這就是程式語言的文化。 



程式語言的文化 

從前段的描述，我們隱約可以看到程式語言文化的意義，然而到底什麼才是程式語言的文化呢？
根據韋式字典對文化的定義：「文化就是一個團體組織所擁有的特色，包括組織中的信仰、
依據信仰原則所產生的產物；亦可表示團體組織的某一段歷史」。依據這個觀念，
一些軟體心理學家已經定義所謂的程式語言文化，「 Human Factors in Software Development 」
一書中便從程式設計的心理因素出發來定義，因此在這裡我們簡單地轉述所謂的程式語言文化就是： 
程式設計師依據程式語言的特性原則，去設計軟體產品，而這些軟體產品所共同具有的特性、
程式設計師所共同具有的程式設計特質，以及程式語言所擁有的特徵，便稱作程式語言的文化。 

而影響形成程式語言文化的因素相當多，歸納後，我們認為重要因素有四點：


設計程式語言的原因

在這裡，我們採用 Brooks 先生在 ACM 辦的 HOPL （程式語言歷史的研討會），所提出的說法，
他認為設計一個新的程式語言的原因為： 


為了使原來的程式語言更好。（如 C++ ） 

為了將程式設計的新概念加入程式語言中。（如 C++ ） 

為了制訂公開的標準。（如 COBOL 的誕生便是 MIS 界因需求而制訂的標準） 

為了好玩。（如 C 、 Java ） 

為了一種新的思想。（如 Smalltalk 、 Beta ） 

以我們認為不同的設計原因會造成程式語言文化的不同，參見後文對 Smalltalk 與 C/C++ 的說明。 

設計程式語言的原則

Brooks 先生亦提到，設計一個好的程式語言應秉持的原則： 

必須知道程式語言應用的問題領域非常清楚。 

必須描述語言的功能特性非常精確、即使該功能特色日後可能不會實作出來。 

必須經常修改，假如需要的話。 

縱使語言結構設計錯誤也不要語言結構設計模糊。 

好的程式語言來自優秀的程式語言設計者。 

所以，如何應用得好這些原則也會影響程式語言的文化，如 JCL 語言，
因為對問題領域認知不夠清楚，導致幾乎沒有人使用。 C++ 的常常修改規格，
成為一種文化，所以編譯器是否能編譯最新的規格竟成為判斷編譯器好壞的一項重要指標，
參見後文對 C/C++ 與 Smalltalk 的詳細說明。 


程式語言的心裡特性

在這裡，我們採用公認的程式語言的心裡特性，我們只對一些特殊的定義加以解釋： 

一致性與意義模糊性。 

簡潔性。 

區域性與直線性（就是是否可以直接 goto ）。 

傳統性（語言各版本間語意語法的相似性是否很高，如果很高的話，將會阻礙程式設計師去學習其他新語言的意願）。 

程式語言的工程特性

程式語言具有下列的工程特性： 

可攜性。 

簡易性（就是程式語言與軟體細部設計的對映能力）。 

效率性。 

齊全性（就是語言支援的工具是否齊全）。 

可維護性（包括程式碼的易讀性，即註解是否完善充分） 





我們認為，第一、二點事實上影響第三、四點，進而影響程式語言的文化。因為通常語言設計者的原始想法，所採用的設計理念，深深地植入程式語言的結構中，然後影響日後眾多程式設計師使用該語言時所產生的心裡特性與工程特性。 



而一個程式語言從誕生到成熟（我們稱之為程式語言的生命週期，亦為程式語言文化的形成），通常需經過如下的階段： 



初始階段：語言設計者碰到特定問題，覺得其他語言不好用，便設計新的語言來解決此問題。 

成長階段：語言設計者所屬的團體，一起使用此新語言，覺得還蠻好用的，開使用在別的領域，發展出一些簡單的程式庫補充語言的不足。 

成熟階段：越來越多人使用之，開始制訂一些語言標準，如修改語法語意等小問題，建立更完整的標準程式庫等，此時許多專屬的程式庫紛紛出現。 

完成階段： ANSI 、 ISO 等組織為此語言定義最終版本，通常已經達到高峰，擁有眾多的使用者，但使用者人數卻很少會成長。 

所以，我們可以進一步的說，上述那些影響程式語言文的四項因子，均勻分佈在程式語言的生命週期中：



在初始階段時，「設計程式語言的原因」因子第一次影響程式語言文化的形成。

在成長階段時，「設計程式語言的原則」因子開始主導程式語言文化發展的方向。

在成熟階段時，「程式語言的心裡特性」因子讓程式語言文化在每個新進的程式設計師心中茲長，人數快速增加。

在完成階段時，「程式語言的工程特性」因子強迫程式語言文化漸漸走向工程化、制度化、標準化的路途，失去文化一開始所具有的多采多姿性質。 



看完前文辰長的討論後，相信您已經可以體認到， Java 目前大概正處於成長與成熟階段中的過渡地帶，「程式語言設計的原因」與「程式語言設計的原則」正深深地影響逐漸形成的 Java 程式語言文化，而「程式語言的心裡特性」則漸漸地在每一位 Java 程式設計師心中形成一股文化——「 Java 真是 Powerful ！」 



以下，我們將先描述 Smalltalk 與 C/C++ 的程式語言文化，特別是從「設計程式語言的原因」與「設計程式語言的原則」的角度來看文化的形成，然後再以同樣的角度看看倒底什麼是 Java 的程式語言文化。 



Smalltalk 的程式語言文化

The best way to predict the future is to invent it......Alan Kay. 



Smalltalk 的設計原因，就是為了實現一個物件導向化的未來。 Kay 這位物件導向學的前輩，在 1969 年他的博士論文中就已經致力於第一代的、圖形式的、物件導向的個人電腦。那時， Simula-67 已經出現，今日耳熟能詳的名詞，如類別、繼承、包裝、 GUI 等等現代物件導向學的概念，那時亦見雛形， Kay 身在其中，感受到未來將是物件導向的世界，在他眼中的物件導向程式語言，據他描述，就是適合處理既美又複雜軟體產品的利器，所以便開始致力於設計一個新的物件導向語言， Smalltalk。 



後來，加入一位好幫手， Adele Goldberg 小姐，她在 1973 年加入 Kay 在全錄公司的語言設計小組，由於她原本擅長電腦與教育學，所以就擔任將 Smalltalk 傳播教育於各個程式設計師階層中的任務。 Kay 本身對教學亦感興趣，在相輔相成下，漸漸地他們將 Smalltalk 定位成一個簡單好學、又功能強大的物件導向程式語言，特別應用在教學領域上，期望獲得成功。 



許多人對於 Smalltalk 的定位，特別是「連小孩子都容易懂的語言，但也能處理複雜軟體設計的語言」深表懷疑。但 Kay 與 Goldberg 卻不覺得有任何矛盾，他們認為： Smalltalk 語言的結構，以小孩子的能力就能理解，這種思維方式雖然簡單，但卻適合將複雜的軟體問題予以看穿，進而設計一個好的軟體產品。因此，在往後物件導向學發展上，「簡單」一直是一個重要的設計原則，當然，許多物件導向學者也開始認真研究小孩子是怎麼思考，進而應用在物件導向學上。 



我們可以發現，目前 Smalltalk 語言文化的特色，就是易學易用（因為設計原則的應用領域鎖定教育市場），與純物件導向語言（因為 Kay 設計語言的原因就是為了實現物件導向的理想）。許多 Smalltalk 愛用者認為，比起 C++ 非純物件導向語言，深以使用純物件導向語言自傲。或許， Goldberg 的一席話，最能代表 Smalltalk 語言文化的特色： 



終於，人們開始發明程式語言去描述表達他們的新點子。 



C/C++ 的程式語言文化

我喜歡用這把挫刀削平木頭，就好像我喜歡 C語言一樣，它不是愚者與小孩所能使用的工具，交由專家來使用，能發揮強大而精緻的功能。......Brad J. Cox 



C 語言是由 Ken Thompson 與 Dennis Ritchie 兩人於 1970 年代初期所共同設計，由美國貝爾實驗室 (Bell Laboratory) 發展，起初的是為了撰寫 UNIX 作業系統，但因 C 語言比組合語言容易，且執行效能頗高，所以目前廣泛用來開發一般的應用程式。 



C 語言成功且持續其威力的原因： 



結合了巧妙性、優雅性、威力、彈性 

是個無侷限性的程式語言 

高效能的程式語言 

※ C 語言經常被稱為中階語言 (middle-level language) ，
它提供了高階語言 (high-level language) 的結構化與低機語言 (low-level language) 的效率之間的平衡。
不過若要將程式語言一刀兩分為高階與中階， C 語言是屬於高階語言。 

C++ 語言由 Bjarne Stroustrup 在 1979 年發明於貝爾實驗室，最初他被稱為「具有類別的 C 」 (C with classes) ，此後歷經三次重要的修正，成為今日所見的 C++ 。 



C++ 是 C 語言的增強版本，主要特色是在 C 中加入了物件導向程式設計 (OOP ， Object-Oriented Programming) 的支援， C++ 算是 C 的超集合 (superset) ，幾乎完全相容 C 的語法與特色。 



※現在一般提到 C 語言，常常是指 C++ 語言 



Bjarne Stroustrup 當初選擇 C 語言作為進化成擁有物件導向功能的 C++ 語言，原因很簡單──只因為 C 語言好改，且很多人用。他認為 C++ 的設計準則為： 



程式語言的設計理念應從許多其他學科觀念借用得來，如數學、工程、建築、藝術、社會、心裡等；當然 C++ 主要為物件導向學。 

程式語言一開始設計時，只能解決某特定問題，但它會成長，演變成能解決新的問題與滿足新的需求。 

最後，甚至連設計的原則，也會演化。 

C++ 就是那種：如果你沒有使用，就不花你電腦任何時間的語言。 

C++ 不會隨便作一些沒有營養的更動。 

所以，我們可以看到， C++ 語言除了基本的物件導向語言功能外，還另外加了一些其他的機制，如 template 。並且， C++ 時常演進，我們相信這種文化絕對跟 Stroustrup 的設計原則有關。此外， C++ 的設計的另一位功臣， Andrew Koenig 亦認為：「程式庫的設計就是程式語言的設計，反之亦然」，這種強調程式庫補足程式語言功能的特質，更可在 C++ 不斷推陳出新的標準程式庫中，看到一些蛛絲馬跡。 



所以， C/C++ 的程式語言文化，由以上的「設計原因」與「設計原則」可看出，就是相當注重執行效率、可攜性、持續不斷的成長以滿足各種需求、與不太容易為一般人所接受。最後，我們用 Stroustrup 自己的一句話作為 C/C++ 程式語言文化的代表： 



現在， C++ 是非常好用的，特別針對當今的機器、程式設計師與問題。 



Java 的程式語言文化 

我想，人們到現在才開始知道，到底什麼是網路系統。 ......James Gosling 



Java 主要是由 James Gosling 在 Sun 公司所率領的小組所開發出來的。一開始，原本 Sun 公司是要 Gosling 他們開發一種可以控制小家電、互動電視等等的簡單好用的小型程式語言，爾後，靈機一動，就將這套語言轉向 Internet 上發展，並且在 1995 年正式公佈，命名為 Java 。 



在 1996 年 3 月， Gosling 與另一位 Perl 語言的設計者 Larry Wall ，共同獲得年度 Dr.Dobb ' s Journal Excellence in Programming Awards 。 Gosling 是 C.M.U. 的博士，曾經開發第一個 C 語言版本的 Emacs ，早年即在 UNIX 領域享用盛名。熟習 Emacs 的人皆知， Emacs 是那種可以自己寫程式掛上去，就擁有自己定義特殊功能的編輯器，算是相當「開放」的。所以 Gosling 日後設計的 Java ，也是走著同樣「開放原則」的路子。 

再者， Java 從原本定位成家電控制語言，到後來的 Internet 上熱門的程式語言，如果語言本身架構不夠開放的話，很容易鎖定一種平台而無法「開放」，所以我們可以說，「開放的設計原則」是 Java 語言的最大特色，亦是逐漸形成的 Java 程式語言文化的最大特色。

除了開放外， Java 從 Smalltalk 與 C++ 那邊也借鏡許多寶貴的文化經驗。諸如， Smalltalk 強調的簡單原則，是 Java 強調易學易用的一大重點； Java 也像 Smalltalk 一樣，是一個純物件導向語言；從 C++ 的標準程式庫中，更是學得推出自己 Java 的一套完善的標準程式庫；此外，為了解決目前網路應用上，最棘手的安全問題，Java 則進一步地在程式語言本身提供一套安全機制。所以，從以上幾點，套用 Goldberg 的話：「終於，人們開始發明程式語言去描述表達他們的新點子。」 

Gosling 自己認為設計 Java 的原則為：

Java 設計之初，便是為了讓程式語言與 client 端的電腦無關，但卻與 server 端的電腦有關，就像是 ODBC 一樣。不同的是，原來 ODBC 存取後端資料庫的前端程式，現在就是存放 Java Applet 的 Web-Server 電腦，而 client 端變成使用者透過 Web 瀏覽器使用 Java 程式，真正的 server 端則仍然是資料庫系統的電腦（我們認為這就是所謂的三層架構）。 

為了達到開放的特性， Java 語言架構所提出的虛擬機器 (VM) ，事實上不只可以讓 Java 在上面執行，其他程式語言也可以。 

對於第二點，我們解釋如下： 



以前的程式語言（如 C/C++ 等）均是把程式碼編譯成組合語言，或者直接編譯成機器語言來執行，但機器語言是隨著各家 CPU 廠牌的不同而不同，所以硬體廠商每新開發出一套機器，最重要的是就是為這 CPU 開發組譯程式與 C 語言等編譯程式，使現成的作業系統程式碼可以在新的機器上跑。然而理論上雖然造成程式碼與機器碼無關，但仍有一些程式碼還是與機器語言相關的，最著名的例子便是 Intel 系列 CPU 為 Little-Endian 次序， Motorola 系列 CPU 為 Big-Endian 次序，造成如 C 語言的指標使用時產生問題；其他如 GUI (Graphical User Interface ，圖形使用者界面 ) 的問題則更是嚴重。總之，編譯器無法完全將程式語言與機器語言的關係切開。 



這個問題，其實早年的系統程式學者便大力推薦「簡單指令集」電腦的概念（與 RISC 電腦的意義不同），亦即在組合語言的層次，提供各家電腦一套標準的組合語言碼，以及容許可延伸的組合碼，讓各 CPU 廠商自行實作標準組合語言碼，並依規定將 CPU 更豐富的功能建於擴充碼中。如此，好比機器語言提供了一個一致的介面供程式語言使用，而這個概念，事實上就是 Java 的虛擬機器的概念，同樣也是注重開放的原則。 



所以，由以上的說明，相信讀者可知目前正在發展的 Java 程式語言文化，並且預測未來 Java 程式語言文化發展的方向為： 



持續在 Internet 網路上發展，將來相信有許多 Internet 的應用程式均是由 Java 開發出來。 

持續維持 Java 的開放特質，如最近新加入的 Java 標準程式庫，在發表之前， Sun 都在網路上提供測試版供所有 Java 愛好者測試，並希望得到回應，以便加入 Java 的標準程式庫中。這點，相信是其他程式語言所沒有的文化。 

朝著「企業程式語言」 (Enterprise Programming Language) 發展。主要目標皆是作為一個企業資訊流程處理控制的程式語言，將過去企業界依賴的大型主機 downsizing 、 rightsizing 到目前漸成主流的三層架構上，相同的論點參見 Java 最新推出的 Enterprise API ，包括存取資料庫的 JDBC API 、符合 CORBA 架構的 Java IDL 程式庫等，以及前面 Gosling 自認的 Java 設計原則。另外如 Datamation 雜誌 1996 年 3 月份大幅報導的「 Java: Internet Toy or Enterprise Tool ? 」與「 Business Uses for Java 」，也是強調 Java 適合作企業資訊處理，作三層式系統架構。 

今日的 Java ，事實上就是在組合語言的層次上，做出跨越各 CPU 的能力的 bytecode。 





重要的程式語言簡述

C++
較早出現於市場的物件導向程式語言，功能最齊全，但也比較不好學。 

C# 
微軟發表的程式語言，宣稱源自於 C++ ，但刪除 C++ 較繁瑣的功能，相較於 C++ 
雖稍有簡化，但依然保存物件導向所需具備的所有功能。 


Java 

跨平台的新興語言，可與網際網路密切結合，最早應用於網際網路的物件導向程式語言，網際網路方面的功能十分齊全 。 



Java 與傳統程式語言有很大的不同，如： C 或 C++ 、 FORTRAN 等，那便是 Java 是一個直譯式（ Interpreted ）的程式語言。當您寫好一個 Java 程式之後，必須先使用 Java 的編譯器（ compiler ）將原始程式編譯位元碼（ Bytecode ），再使用 Java 直譯器來執行位元碼。因為 Java 的位元碼提供了一個與機器架構都無關的檔案格式，所以可以在各種平台上執行，只要平台上有所謂的 Java 虛擬機器。 



XML 
談到了 Java ，不得不順便介紹 XML ，以一句簡單的話說明他們的關係：「 Java 是跨平台的程式， XML 是跨平台的資料」， Java 不受限於平台環境的特性，改變了程式語言的演進史， XML 更進一步將資料交換的問題解決了，讓 Java 可以更盡情自在的發揮。 Java 和 XML 有許多共同的特徵，而這些特徵是用在以網站為基本單位的企業應用軟體上，最重要的功能，例如：平台獨立、可擴充性、程式碼再使用、支授全球共同語言（ Unicode ） ... 等等。 



PHP 、 ASP 
網頁程式開發語言 

VB7 (VB.NET) 
源自於 VB6 ，補齊了 VB6 所欠缺的物件導向功能。 



VB7 的前身 VB6 ，雖然也具備物件導向的特性，但功能並不完整，
許多人一直在等待 VB 變成一個完全的物件導向程式語言，其間從 VB4 到 VB6 ，
都只是增加一部份物件導向功能，但始終不完整，相較於其他物件導向程式語言的誕生時間，
 VB7 簡直就是個遲到者。 


終於等到 VB7 變成完全的物件導向程式語言 

微軟同時也將程式執行環境物件導向化了，換句話說，就是提供豐富的通用物件類別庫，這將會提高不同程式語言之間的可移植性 

微軟也統一了物件存取介面，這將使得以不同程式語言所發展的出來的物件類別可通用於其他程式語言。 

而以上的第 (2)(3) 點，也正是微軟 .NET 專案的一部份功能。 

Pascal 


嚴謹的高階語言 


Perl 


目前最受歡迎的 CGI 開發語言 

SQL 

標準的資料庫查詢語言
http://www.cis.nctu.edu.tw/~is92001/computer/programming/language